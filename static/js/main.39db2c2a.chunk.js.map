{"version":3,"sources":["services/api.js","components/StatCard.js","components/Stats.js","components/CountrySelector.js","components/CountryStats.js","components/GlobalStats.js","components/charts/DailyChart.js","components/charts/CountryDailyChart.js","components/Charts.js","components/Vaccine.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","useApiData","url","startsWith","slice","useState","data","setData","errors","setErrors","loading","setLoading","useEffect","fetch","then","response","json","catch","StatCard","title","color","grey","Card","CardContent","Typography","gutterBottom","variant","component","style","value","Stats","console","error","LinearProgress","marginTop","Grid","container","spacing","item","xs","md","confirmed","recovered","green","deaths","red","CountrySelector","onCountrySelected","updateCountryName","countries","CircularProgress","options","map","name","iso2","iso3","MenuItem","key","FormControl","InputLabel","id","Select","labelId","onChange","e","target","_","find","country","CountryStats","props","setCountry","countryName","setCountryName","GlobalStats","DailyChart","confirmedCases","day","totalConfirmed","recoveredCases","totalRecovered","dataSets","labels","reportDateString","datasets","label","backgroundColor","amber","borderColor","getRealDate","date","Moment","format","parseDate","subtract","toDate","CountryDailyChart","setDate","showChina","setShowChina","minData","setMinData","deathCases","filteredData","filter","d","parseInt","groupBy","countryRegion","forEach","values","push","reduce","position","findIndex","c","splice","dataSet","FormGroup","row","FormControlLabel","control","Checkbox","checked","TextField","type","defaultValue","persist","marginLeft","scales","xAxes","stacked","yAxes","Charts","BorderLinearProgress","withStyles","root","height","Vaccine","vaccineAnnouncementDate","vaccineDate","add","reaminingTime","diff","remainingMonths","completed","unix","theme","responsiveFontSizes","createMuiTheme","palette","primary","blue","App","lastUpdate","toString","ThemeProvider","Container","Link","href","marginBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","React","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39db2c2a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const BASE_URL = 'https://covid19.mathdro.id/api';\n\n/**\n * Fetch the api whit the desired url\n * @param {String} url\n */\nexport function useApiData(url = '') {\n  if (url.startsWith('/')) url = url.slice(1);\n\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/${url}`)\n      .then(response => response.json())\n      .then(setData)\n      .then(() => setLoading(false))\n      .catch(setErrors);\n  }, [url]);\n\n  return [data, errors, loading];\n}\n\nexport default useApiData;\n","import React from 'react';\n// Styles\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nexport default function StatCard({ title, data, color = grey['900'] }) {\n  return (\n    <Card>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n\n        <Typography variant=\"h4\" component=\"h4\" style={{ color }}>\n          {data.value}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { useApiData } from '../services/api';\nimport StatCard from './StatCard';\nimport { Grid, Typography, LinearProgress } from '@material-ui/core';\nimport { red, green } from '@material-ui/core/colors';\n\nexport default function Stats({ url, style }) {\n  const [data, errors, loading] = useApiData(url);\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <LinearProgress />;\n  }\n  if (data && 'error' in data) {\n    return (\n      <Typography\n        variant=\"h4\"\n        component=\"h4\"\n        color=\"error\"\n        style={{ marginTop: '2rem' }}\n      >\n        There isn't data available for this country\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid style={style} container spacing={3}>\n      <Grid item xs={12} md={4}>\n        <StatCard title=\"Confirmed\" data={data.confirmed} />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <StatCard\n          title=\"Recovered\"\n          data={data.recovered}\n          color={green['500']}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <StatCard title=\"Deaths\" data={data.deaths} color={red['500']} />\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress\n} from '@material-ui/core';\nimport _ from 'lodash';\nimport useApiData from '../services/api';\n\nexport default function CountrySelector({\n  value,\n  onCountrySelected,\n  updateCountryName\n}) {\n  const [countries, errors, loading] = useApiData('countries');\n  const handleCountryChanged = e => {\n    onCountrySelected(e.target.value);\n    updateCountryName(\n      _.find(countries.countries, country => country.iso3 === e.target.value)\n        .name\n    );\n  };\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  const options = countries.countries.map(({ name, iso2, iso3 }) => {\n    return (\n      <MenuItem value={iso3} key={`${iso3}${iso2}${name}`}>\n        {name}\n      </MenuItem>\n    );\n  });\n\n  return (\n    <FormControl>\n      <InputLabel id=\"country-select-label\">Country</InputLabel>\n      <Select\n        labelId=\"country-select-label\"\n        id=\"country-select\"\n        value={value}\n        onChange={handleCountryChanged}\n      >\n        {options}\n      </Select>\n    </FormControl>\n  );\n}\n","import React, { useState } from 'react';\nimport Stats from './Stats';\nimport { Typography } from '@material-ui/core';\nimport CountrySelector from './CountrySelector';\n\nexport default function CountryStats(props) {\n  const [country, setCountry] = useState('ESP');\n  const [countryName, setCountryName] = useState('Spain');\n\n  const url = `/countries/${country}`;\n  return (\n    <div style={props.style}>\n      <Typography variant=\"h3\" component=\"h3\">\n        Results for {countryName}\n      </Typography>\n\n      <CountrySelector\n        value={country}\n        onCountrySelected={setCountry}\n        updateCountryName={setCountryName}\n      ></CountrySelector>\n\n      <Stats style={{ marginTop: '1rem' }} url={url}></Stats>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport Stats from './Stats';\n\nexport default function GlobalStats({ style }) {\n  return (\n    <div style={style}>\n      <Typography variant=\"h3\" component=\"h3\">\n        Global Results\n      </Typography>\n      <Stats style={{ marginTop: '1rem' }}></Stats>\n    </div>\n  );\n}\n","import React from 'react';\nimport { LinearProgress, Typography } from '@material-ui/core';\nimport useApiData from '../../services/api';\nimport { Line } from 'react-chartjs-2';\nimport { green, amber } from '@material-ui/core/colors';\n\nexport default function DailyChart() {\n  const [data, errors, loading] = useApiData('daily');\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <LinearProgress />;\n  }\n\n  const confirmedCases = data.map(day => day.totalConfirmed);\n  const recoveredCases = data.map(day => day.totalRecovered);\n  const labels = data.map(day => day.reportDateString);\n\n  const dataSets = {\n    labels,\n    datasets: [\n      {\n        label: 'Confirmed',\n        data: confirmedCases,\n        backgroundColor: amber['100'] + '40',\n        borderColor: amber['500']\n      },\n      {\n        label: 'Recovered',\n        data: recoveredCases,\n        backgroundColor: green['100'] + '80',\n        borderColor: green['500']\n      }\n    ]\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h4\">\n        Daily Chart\n      </Typography>\n      <Line data={dataSets}></Line>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  LinearProgress,\n  Typography,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  TextField\n} from '@material-ui/core';\nimport useApiData from '../../services/api';\nimport { Bar } from 'react-chartjs-2';\nimport { green, red, amber } from '@material-ui/core/colors';\nimport Moment from 'moment';\nimport _ from 'lodash';\n\nfunction parseDate(date) {\n  return Moment(date).format('M-D-YYYY');\n}\n\nfunction getRealDate(date) {\n  return parseDate(\n    Moment(date)\n      .subtract(1, 'day')\n      .toDate()\n  );\n}\n\nexport default function CountryDailyChart() {\n  const [date, setDate] = useState(Moment());\n  const [showChina, setShowChina] = useState(false);\n  const [minData, setMinData] = useState(10000);\n  const [data, errors, loading] = useApiData('daily/' + getRealDate(date));\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <LinearProgress />;\n  }\n\n  const labels = [];\n  const confirmedCases = [];\n  const recoveredCases = [];\n  const deathCases = [];\n\n  let filteredData = _.filter(data, d => parseInt(d.confirmed) > minData);\n  filteredData = _.groupBy(filteredData, d => d.countryRegion);\n  _.forEach(filteredData, (values, country) => {\n    labels.push(country);\n    confirmedCases.push(values.map(d => parseInt(d.confirmed)).reduce(d => d));\n    recoveredCases.push(values.map(d => parseInt(d.recovered)).reduce(d => d));\n    deathCases.push(values.map(d => parseInt(d.deaths)).reduce(d => d));\n  });\n\n  if (!showChina) {\n    const position = labels.findIndex(c => c === 'China');\n    labels.splice(position, 1);\n    confirmedCases.splice(position, 1);\n    recoveredCases.splice(position, 1);\n    deathCases.splice(position, 1);\n  }\n\n  const dataSet = {\n    labels,\n    datasets: [\n      {\n        label: 'Confirmed Cases',\n        data: confirmedCases,\n        backgroundColor: amber['500'],\n        borderColor: amber['500']\n      },\n      {\n        label: 'Recovered Cases',\n        data: recoveredCases,\n        backgroundColor: green['500'],\n        borderColor: green['500']\n      },\n      {\n        label: 'Death Cases',\n        data: deathCases,\n        backgroundColor: red['500'],\n        borderColor: red['500']\n      }\n    ]\n  };\n\n  const options = {\n    scales: {\n      xAxes: [\n        {\n          stacked: true\n        }\n      ],\n      yAxes: [\n        {\n          stacked: true\n        }\n      ]\n    }\n  };\n\n  const handleShowChina = e => {\n    setShowChina(!showChina);\n  };\n\n  const handleDateChange = e => {\n    e.persist();\n    setDate(e.target.value);\n  };\n\n  const handleMinDataChange = e => {\n    e.persist();\n    setMinData(e.target.value);\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h4\">\n        Daily Chart Per Country\n      </Typography>\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={showChina}\n              onChange={handleShowChina}\n              value={showChina}\n              color=\"primary\"\n            />\n          }\n          label=\"Show China\"\n        />\n        <TextField\n          id=\"date\"\n          label=\"Date\"\n          type=\"date\"\n          defaultValue={Moment(date).format('YYYY-MM-DD')}\n          onChange={handleDateChange}\n          style={{ marginLeft: '1rem' }}\n        />\n        <TextField\n          id=\"minCases\"\n          label=\"Minimum Nº of Cases\"\n          type=\"number\"\n          defaultValue={minData}\n          onChange={handleMinDataChange}\n          style={{ marginLeft: '1rem' }}\n        />\n      </FormGroup>\n      <Bar data={dataSet} options={options}></Bar>\n    </>\n  );\n}\n","import React from 'react';\nimport DailyChart from './charts/DailyChart';\nimport CountryDailyChart from './charts/CountryDailyChart';\n\nexport default function Charts() {\n  return (\n    <>\n      <DailyChart></DailyChart>\n      <CountryDailyChart></CountryDailyChart>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  LinearProgress,\n  withStyles\n} from '@material-ui/core';\nimport Moment from 'moment';\n\nconst BorderLinearProgress = withStyles({\n  root: {\n    height: 15\n  }\n})(LinearProgress);\n\nexport default function Vaccine({ style }) {\n  const vaccineAnnouncementDate = Moment('2020-02-14');\n  const vaccineDate = vaccineAnnouncementDate.add(15, 'months');\n\n  const reaminingTime = vaccineDate.diff(Moment(), 'days');\n  const remainingMonths = vaccineDate.diff(Moment(), 'months');\n\n  const completed = vaccineAnnouncementDate.unix() / vaccineDate.unix();\n  return (\n    <Card style={style}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          Vaccine Remaining Time\n        </Typography>\n        <BorderLinearProgress variant=\"determinate\" value={completed} />\n\n        <Typography color=\"textSecondary\" style={{ marginTop: '0.5rem' }}>\n          ~<strong>{reaminingTime}</strong> Days Remaining (\n          <strong>{remainingMonths}</strong> Months)\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport {\n  Container,\n  Typography,\n  Link,\n  createMuiTheme,\n  responsiveFontSizes,\n  ThemeProvider\n} from '@material-ui/core';\nimport useApiData from './services/api';\nimport CountryStats from './components/CountryStats';\nimport GlobalStats from './components/GlobalStats';\nimport Moment from 'moment';\nimport Charts from './components/Charts';\nimport Vaccine from './components/Vaccine';\nimport { blue } from '@material-ui/core/colors';\n\nconst theme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: blue\n    }\n  })\n);\n\nfunction App() {\n  const [data, ,] = useApiData();\n\n  let lastUpdate = '...';\n\n  if (data) {\n    lastUpdate = Moment(data.lastUpdate).toString();\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container style={{ marginTop: '3rem' }}>\n        <Typography variant=\"h1\" component=\"h1\">\n          COVID-19 Daily Data\n        </Typography>\n        <Typography variant=\"h5\" component=\"h5\">\n          Created by&nbsp;\n          <Link\n            target=\"_blank\"\n            href=\"https://www.linkedin.com/in/antonio-mora-rives/\"\n          >\n            <strong>Antonio Mora Rives</strong>\n          </Link>\n        </Typography>\n\n        <Typography variant=\"h2\" component=\"h2\" style={{ marginTop: '1rem' }}>\n          Data\n        </Typography>\n\n        <GlobalStats style={{ marginTop: '1rem' }}></GlobalStats>\n\n        <Vaccine style={{ marginTop: '3rem' }}></Vaccine>\n\n        <CountryStats style={{ marginTop: '3rem' }}></CountryStats>\n\n        <Typography variant=\"h3\" component=\"h3\" style={{ marginTop: '1rem' }}>\n          <Link\n            target=\"_blank\"\n            href=\"https://drive.google.com/open?id=1yCPR-ukAgE55sROnmBUFmtLN6riVLTu3&usp=sharing\"\n          >\n            Realtime Map\n          </Link>\n        </Typography>\n\n        <Typography variant=\"h2\" component=\"h2\" style={{ marginTop: '1rem' }}>\n          Charts\n        </Typography>\n        <Charts></Charts>\n\n        <Typography variant=\"h6\" component=\"h6\" style={{ marginTop: '3rem' }}>\n          API data provided by&nbsp;\n          <Link target=\"_blank\" href=\"https://covid19.mathdro.id/\">\n            Mathdroid\n          </Link>\n        </Typography>\n        <Typography\n          variant=\"h6\"\n          component=\"h6\"\n          style={{ marginBottom: '3rem' }}\n        >\n          Updated {lastUpdate}\n        </Typography>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.React = React;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}