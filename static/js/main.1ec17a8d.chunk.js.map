{"version":3,"sources":["services/api.js","components/StatCard.js","components/Stats.js","components/CountrySelector.js","components/CountryStats.js","components/GlobalStats.js","components/charts/DailyChart.js","components/charts/CountryDailyChart.js","components/Charts.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","useApiData","url","startsWith","slice","useState","data","setData","errors","setErrors","loading","setLoading","useEffect","fetch","then","response","json","catch","StatCard","title","color","grey","Card","CardContent","Typography","gutterBottom","variant","component","style","value","Stats","console","error","LinearProgress","marginTop","Grid","container","spacing","item","xs","md","confirmed","recovered","green","deaths","red","CountrySelector","onCountrySelected","updateCountryName","countries","CircularProgress","options","Object","entries","map","country","key","MenuItem","FormControl","InputLabel","id","Select","labelId","onChange","e","target","_","invert","CountryStats","props","setCountry","countryName","setCountryName","GlobalStats","DailyChart","confirmedCases","day","totalConfirmed","recoveredCases","totalRecovered","dataSets","labels","reportDateString","datasets","label","backgroundColor","amber","borderColor","parseDate","date","Moment","format","CountryDailyChart","subtract","setDate","showChina","setShowChina","minData","setMinData","deathCases","filteredData","filter","d","parseInt","groupBy","countryRegion","forEach","values","push","reduce","shift","dataSet","FormGroup","row","FormControlLabel","control","Checkbox","checked","TextField","type","defaultValue","persist","marginLeft","defaultMin","scales","xAxes","stacked","yAxes","Charts","App","lastUpdate","toString","Container","Link","href","marginBottom","Boolean","window","location","hostname","match","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1ec17a8d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const BASE_URL = 'https://covid19.mathdro.id/api';\n\n/**\n * Fetch the api whit the desired url\n * @param {String} url\n */\nexport function useApiData(url = '') {\n  if (url.startsWith('/')) url = url.slice(1);\n\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/${url}`)\n      .then(response => response.json())\n      .then(setData)\n      .then(() => setLoading(false))\n      .catch(setErrors);\n  }, [url]);\n\n  return [data, errors, loading];\n}\n\nexport default useApiData;\n","import React from 'react';\n// Styles\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nexport default function StatCard({ title, data, color = grey['900'] }) {\n  return (\n    <Card>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n\n        <Typography variant=\"h4\" component=\"h4\" style={{ color }}>\n          {data.value}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { useApiData } from '../services/api';\nimport StatCard from './StatCard';\nimport { Grid, Typography, LinearProgress } from '@material-ui/core';\nimport { red, green } from '@material-ui/core/colors';\n\nexport default function Stats({ url, style }) {\n  const [data, errors, loading] = useApiData(url);\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <LinearProgress />;\n  }\n  if (data && 'error' in data) {\n    return (\n      <Typography\n        variant=\"h4\"\n        component=\"h4\"\n        color=\"error\"\n        style={{ marginTop: '2rem' }}\n      >\n        There isn't data available for this country\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid style={style} container spacing={3}>\n      <Grid item xs={12} md={4}>\n        <StatCard title=\"Confirmed\" data={data.confirmed} />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <StatCard\n          title=\"Recovered\"\n          data={data.recovered}\n          color={green['500']}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <StatCard title=\"Deaths\" data={data.deaths} color={red['500']} />\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  CircularProgress\n} from '@material-ui/core';\nimport _ from 'lodash';\nimport useApiData from '../services/api';\n\nexport default function CountrySelector({\n  value,\n  onCountrySelected,\n  updateCountryName\n}) {\n  const [countries, errors, loading] = useApiData('countries');\n  const handleCountryChanged = e => {\n    onCountrySelected(e.target.value);\n    updateCountryName(_.invert(countries.countries)[e.target.value]);\n  };\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  const options = Object.entries(countries.countries).map(([country, key]) => {\n    return (\n      <MenuItem value={key} key={key}>\n        {country}\n      </MenuItem>\n    );\n  });\n\n  return (\n    <FormControl>\n      <InputLabel id=\"country-select-label\">Country</InputLabel>\n      <Select\n        labelId=\"country-select-label\"\n        id=\"country-select\"\n        value={value}\n        onChange={handleCountryChanged}\n      >\n        {options}\n      </Select>\n    </FormControl>\n  );\n}\n","import React, { useState } from 'react';\nimport Stats from './Stats';\nimport { Typography } from '@material-ui/core';\nimport CountrySelector from './CountrySelector';\n\nexport default function CountryStats(props) {\n  const [country, setCountry] = useState('ES');\n  const [countryName, setCountryName] = useState('Spain');\n\n  const url = `/countries/${country}`;\n  return (\n    <div style={props.style}>\n      <Typography variant=\"h3\" component=\"h3\">\n        Results for {countryName}\n      </Typography>\n\n      <CountrySelector\n        value={country}\n        onCountrySelected={setCountry}\n        updateCountryName={setCountryName}\n      ></CountrySelector>\n\n      <Stats style={{ marginTop: '1rem' }} url={url}></Stats>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport Stats from './Stats';\n\nexport default function GlobalStats({ style }) {\n  return (\n    <div style={style}>\n      <Typography variant=\"h3\" component=\"h3\">\n        Global Results\n      </Typography>\n      <Stats style={{ marginTop: '1rem' }}></Stats>\n    </div>\n  );\n}\n","import React from 'react';\nimport { LinearProgress, Typography } from '@material-ui/core';\nimport useApiData from '../../services/api';\nimport { Line } from 'react-chartjs-2';\nimport { green, amber } from '@material-ui/core/colors';\n\nexport default function DailyChart() {\n  const [data, errors, loading] = useApiData('daily');\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <LinearProgress />;\n  }\n\n  const confirmedCases = data.map(day => day.totalConfirmed);\n  const recoveredCases = data.map(day => day.totalRecovered);\n  const labels = data.map(day => day.reportDateString);\n\n  const dataSets = {\n    labels,\n    datasets: [\n      {\n        label: 'Confirmed',\n        data: confirmedCases,\n        backgroundColor: amber['100'] + '40',\n        borderColor: amber['500']\n      },\n      {\n        label: 'Recovered',\n        data: recoveredCases,\n        backgroundColor: green['100'] + '80',\n        borderColor: green['500']\n      }\n    ]\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h4\">\n        Daily Chart\n      </Typography>\n      <Line data={dataSets}></Line>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  LinearProgress,\n  Typography,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  TextField\n} from '@material-ui/core';\nimport useApiData from '../../services/api';\nimport { Bar } from 'react-chartjs-2';\nimport { green, red, amber } from '@material-ui/core/colors';\nimport Moment from 'moment';\nimport _ from 'lodash';\n\nfunction parseDate(date) {\n  return Moment(date).format('M-D-YYYY');\n}\n\nexport default function CountryDailyChart() {\n  const [date, setDate] = useState(parseDate(Moment().subtract(1, 'day')));\n  const [showChina, setShowChina] = useState(false);\n  const [minData, setMinData] = useState(100);\n  const [data, errors, loading] = useApiData('daily/' + date);\n\n  if (errors) {\n    console.error(errors);\n    return <div>Error!!</div>;\n  }\n  if (loading) {\n    return <LinearProgress />;\n  }\n\n  const labels = [];\n  const confirmedCases = [];\n  const recoveredCases = [];\n  const deathCases = [];\n\n  let filteredData = _.filter(data, d => parseInt(d.confirmed) > minData);\n  filteredData = _.groupBy(filteredData, d => d.countryRegion);\n  _.forEach(filteredData, (values, country) => {\n    labels.push(country);\n    confirmedCases.push(values.map(d => parseInt(d.confirmed)).reduce(d => d));\n    recoveredCases.push(values.map(d => parseInt(d.recovered)).reduce(d => d));\n    deathCases.push(values.map(d => parseInt(d.deaths)).reduce(d => d));\n  });\n\n  if (!showChina) {\n    labels.shift();\n    confirmedCases.shift();\n    recoveredCases.shift();\n    deathCases.shift();\n  }\n\n  const dataSet = {\n    labels,\n    datasets: [\n      {\n        label: 'Confirmed Cases',\n        data: confirmedCases,\n        backgroundColor: amber['500'],\n        borderColor: amber['500']\n      },\n      {\n        label: 'Recovered Cases',\n        data: recoveredCases,\n        backgroundColor: green['500'],\n        borderColor: green['500']\n      },\n      {\n        label: 'Death Cases',\n        data: deathCases,\n        backgroundColor: red['500'],\n        borderColor: red['500']\n      }\n    ]\n  };\n\n  const options = {\n    scales: {\n      xAxes: [\n        {\n          stacked: true\n        }\n      ],\n      yAxes: [\n        {\n          stacked: true\n        }\n      ]\n    }\n  };\n\n  const handleShowChina = e => {\n    setShowChina(!showChina);\n  };\n\n  const handleDateChange = e => {\n    e.persist();\n    setDate(parseDate(e.target.value));\n  };\n\n  const handleMinDataChange = e => {\n    e.persist();\n    setMinData(e.target.value);\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h4\">\n        Daily Chart Per Country\n      </Typography>\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={showChina}\n              onChange={handleShowChina}\n              value={showChina}\n              color=\"primary\"\n            />\n          }\n          label=\"Show China\"\n        />\n        <TextField\n          id=\"date\"\n          label=\"Date\"\n          type=\"date\"\n          defaultValue={Moment(date).format('YYYY-MM-DD')}\n          onChange={handleDateChange}\n          style={{ marginLeft: '1rem' }}\n        />\n        <TextField\n          id=\"minCases\"\n          label=\"Minimum Nº of Cases\"\n          type=\"number\"\n          defaultValue={minData}\n          defaultMin=\"0\"\n          onChange={handleMinDataChange}\n          style={{ marginLeft: '1rem' }}\n        />\n      </FormGroup>\n      <Bar data={dataSet} options={options}></Bar>\n    </>\n  );\n}\n","import React from 'react';\nimport DailyChart from './charts/DailyChart';\nimport CountryDailyChart from './charts/CountryDailyChart';\n\nexport default function Charts() {\n  return (\n    <>\n      <DailyChart></DailyChart>\n      <CountryDailyChart></CountryDailyChart>\n    </>\n  );\n}\n","import React from 'react';\nimport { Container, Typography, Link } from '@material-ui/core';\nimport useApiData from './services/api';\nimport CountryStats from './components/CountryStats';\nimport GlobalStats from './components/GlobalStats';\nimport Moment from 'moment';\nimport Charts from './components/Charts';\n\nfunction App() {\n  const [data, ,] = useApiData();\n\n  let lastUpdate = '...';\n\n  if (data) {\n    lastUpdate = Moment(data.lastUpdate).toString();\n  }\n\n  return (\n    <Container style={{ marginTop: '3rem' }}>\n      <Typography variant=\"h1\" component=\"h1\">\n        COVID-19 Daily Data\n      </Typography>\n      <Typography variant=\"h5\" component=\"h5\">\n        Created by&nbsp;\n        <Link\n          target=\"_blank\"\n          href=\"https://www.linkedin.com/in/antonio-mora-rives/\"\n        >\n          Antonio Mora Rives\n        </Link>\n      </Typography>\n\n      <Typography variant=\"h2\" component=\"h2\" style={{ marginTop: '1rem' }}>\n        Data\n      </Typography>\n\n      <GlobalStats style={{ marginTop: '1rem' }}></GlobalStats>\n      <CountryStats style={{ marginTop: '3rem' }}></CountryStats>\n\n      <Typography variant=\"h2\" component=\"h2\" style={{ marginTop: '1rem' }}>\n        Charts\n      </Typography>\n      <Charts></Charts>\n\n      <Typography variant=\"h6\" component=\"h6\" style={{ marginTop: '3rem' }}>\n        API data provided by&nbsp;\n        <Link target=\"_blank\" href=\"https://covid19.mathdro.id/\">\n          Mathdroid\n        </Link>\n      </Typography>\n      <Typography variant=\"h6\" component=\"h6\" style={{ marginBottom: '3rem' }}>\n        Updated {lastUpdate}\n      </Typography>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.React = React;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}